<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Eclipse Keyple</title><link>/keyple-website/</link><atom:link href="/keyple-website/index.xml" rel="self" type="application/rss+xml"/><description>Eclipse Keyple</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright Â© Eclipse Foundation, Inc. All Rights Reserved.</copyright><lastBuildDate>Wed, 01 Jul 2020 15:19:23 +0200</lastBuildDate><image><url>/keyple-website/images/logo_hud2fb0b35622057c5c7bb20829420fe80_179328_300x300_fit_lanczos_2.png</url><title>Eclipse Keyple</title><link>/keyple-website/</link></image><item><title>Get Started with Keyple-Java</title><link>/keyple-website/docs/getstarted-java/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0100</pubDate><guid>/keyple-website/docs/getstarted-java/</guid><description>&lt;p>This getting stated contains one ready-to-execute JAVA example starting from a new Gradle project.&lt;/p>
&lt;p>The example demonstrate Keyple capabilities with the Keyple PCSC plugin and PO/SAM provided in the Calypso Test Kit.&lt;/p>
&lt;h2 id="build">Build&lt;/h2>
&lt;p>The example can run on any machine: Linux, Windows and MacOS. If not installed in your machine, you will need to download :&lt;/p>
&lt;p>Java 1.6 or newer&lt;/p>
&lt;p>Gradle (any version) download&lt;/p>
&lt;p>We recommend that you use a Java IDE like Eclipse or Intellij to create your new Gradle project.&lt;/p>
&lt;p>Create a new Gradle project.&lt;/p>
&lt;p>Add the following statements to your build.gradle file to import Keyple components into your project:&lt;/p>
&lt;pre>&lt;code class="language-java">repositories {
//to import snapshots
maven {url 'https://oss.sonatype.org/content/repositories/snapshots' }
//to import releases
//maven { url 'https://oss.sonatype.org/content/repositories/releases' }
}
dependencies {
//Keyple core is a mandatory library for using Keyple, in this case import the last version of keyple-java-core
implementation group: 'org.eclipse.keyple', name: 'keyple-java-core', version: '+'
//Import Calypso library to support Calypso Portable Object, in this case import the last version of keyple-java-calypso
implementation group: 'org.eclipse.keyple', name: 'keyple-java-calypso', version: '+'
//Import PCSC library to use a Pcsc reader, in this case import the last version of keyple-java-plugin-pcsc
implementation group: 'org.eclipse.keyple', name: 'keyple-java-plugin-pcsc', version: '+'
}
&lt;/code>&lt;/pre>
&lt;p>Add the following statements to your build.gradle file to import Logger components into your project:&lt;/p>
&lt;pre>&lt;code class="language-java">dependencies {
implementation &amp;quot;org.slf4j:slf4j-simple:1.7.25&amp;quot;
implementation &amp;quot;org.slf4j:slf4j-ext:1.7.25&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>Copy the source code below in a new Java Class named Demo_CalypsoTestKit_App2_Pcsc:&lt;/p>
&lt;pre>&lt;code class="language-java">/********************************************************************************
* Copyright (c) Calypso Networks Association 2020 https://www.calypsonet-asso.org/
*
* See the NOTICE file(s) distributed with this work for additional information regarding copyright
* ownership.
*
* This program and the accompanying materials are made available under the terms of the Eclipse
* Public License 2.0 which is available at http://www.eclipse.org/legal/epl-2.0
*
* SPDX-License-Identifier: EPL-2.0
********************************************************************************/
import org.eclipse.keyple.calypso.command.po.parser.ReadDataStructure;
import org.eclipse.keyple.calypso.command.po.parser.ReadRecordsRespPars;
import org.eclipse.keyple.calypso.command.sam.SamRevision;
import org.eclipse.keyple.calypso.transaction.*;
import org.eclipse.keyple.core.selection.*;
import org.eclipse.keyple.core.seproxy.*;
import org.eclipse.keyple.core.seproxy.exception.KeypleBaseException;
import org.eclipse.keyple.core.seproxy.exception.KeypleReaderException;
import org.eclipse.keyple.core.seproxy.exception.NoStackTraceThrowable;
import org.eclipse.keyple.core.seproxy.protocol.SeCommonProtocols;
import org.eclipse.keyple.core.util.ByteArrayUtil;
import org.eclipse.keyple.plugin.pcsc.PcscPlugin;
import org.eclipse.keyple.plugin.pcsc.PcscPluginFactory;
import org.eclipse.keyple.plugin.pcsc.PcscProtocolSetting;
import org.eclipse.keyple.plugin.pcsc.PcscReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class Demo_CalypsoTestKit_App2_Pcsc {
private static final Logger logger =
LoggerFactory.getLogger(Demo_CalypsoTestKit_App2_Pcsc.class);
/* Plugin name */
private final static String PLUGIN_NAME = &amp;quot;PcscPlugin&amp;quot;;
/* PO Reader name */
private final static String PO_READER_NAME = &amp;quot;ASK LoGO 0&amp;quot;;
/* SAM Reader name */
private final static String SAM_READER_NAME = &amp;quot;Identive CLOUD 2700 R Smart Card Reader 0&amp;quot;;
/* AID: Keyple test kit profile 1, Application 2 */
private final static String AID = &amp;quot;315449432E49434131&amp;quot;;
private final static byte RECORD_NUMBER_1 = 1;
private final static byte SFI_EnvironmentAndHolder = (byte) 0x07;
public static void main(String[] args) throws KeypleBaseException, NoStackTraceThrowable {
/* Get the instance of the SeProxyService (Singleton pattern) */
SeProxyService seProxyService = SeProxyService.getInstance();
logger.info(
&amp;quot;=================================================================================&amp;quot;);
logger.info(
&amp;quot;= Configuration of the PO &amp;amp; SAM Readers =&amp;quot;);
logger.info(
&amp;quot;=================================================================================&amp;quot;);
/* Assign PcscPlugin to the SeProxyService */
seProxyService.registerPlugin(new PcscPluginFactory());
/* Get the PcscPlugin */
ReaderPlugin plugin = seProxyService.getPlugin(PcscPlugin.PLUGIN_NAME);
/* Get the PO reader */
SeReader poReader = plugin.getReader(PO_READER_NAME);
/* Sets the PO reader parameters for contactless secure elements */
setContactlessSettings(poReader);
/* Get a SAM reader */
SeReader samReader = plugin.getReader(SAM_READER_NAME);
/* Sets the reader parameters for contacts secure elements */
setContactsSettings(samReader);
logger.info(
&amp;quot;=================================================================================&amp;quot;);
logger.info(
&amp;quot;= Opening logical channel with the SAM =&amp;quot;);
logger.info(
&amp;quot;=================================================================================&amp;quot;);
/*
* Open logical channel for the SAM inserted in the reader
* (We expect the right is inserted)
*/
SamResource samResource = checkSamAndOpenChannel(samReader);
/* Check if the readers exists */
if (poReader == null || samResource == null) {
throw new IllegalStateException(&amp;quot;Bad PO or SAM reader setup&amp;quot;);
}
logger.info(&amp;quot;======= Secure reading of Environment and Holder file &amp;amp; Po Authentication =======&amp;quot;);
logger.info(&amp;quot;= PO Reader NAME = {}&amp;quot;, poReader.getName());
logger.info(&amp;quot;= SAM Reader NAME = {}&amp;quot;, samResource.getSeReader().getName());
/* Check if a PO is present in the reader */
if (poReader.isSePresent()) {
logger.info(
&amp;quot;=================================================================================&amp;quot;);
logger.info(
&amp;quot;= Start of the Calypso PO processing. =&amp;quot;);
logger.info(
&amp;quot;=================================================================================&amp;quot;);
logger.info(
&amp;quot;= 1st PO exchange =&amp;quot;);
logger.info(
&amp;quot;= AID based selection =&amp;quot;);
logger.info(
&amp;quot;=================================================================================&amp;quot;);
/*
* Prepare a Calypso PO selection
*/
SeSelection seSelection = new SeSelection();
/*
* Setting of an AID based selection of a Calypso REV3 PO
*
* Select the first application matching the selection AID whatever the SE communication protocol
* Keep the logical channel open after the selection
*
* Calypso PO selection: configures a PoSelectionRequest with all the desired attributes to
* make the selection and read additional information afterwards
*/
PoSelectionRequest poSelectionRequest = new PoSelectionRequest(
new PoSelector( //the selector to target a particular SE
SeCommonProtocols.PROTOCOL_ISO14443_4, // the SE communication protocol
null, // the ATR filter
new PoSelector.PoAidSelector( // the AID selection data
new SeSelector.AidSelector.IsoAid(AID), // the application identifier
PoSelector.InvalidatedPo.REJECT), // an enum value to indicate if an invalidated PO should be accepted or not
&amp;quot;AID: &amp;quot;+ AID), // information string (to be printed in logs)
ChannelState.KEEP_OPEN); // tell if the channel is to be closed or not after the command
/*
* Add the selection case to the current selection (we could have added other cases
* here)
*/
seSelection.prepareSelection(poSelectionRequest);
/*
* Actual PO communication: operate through a single request the Calypso PO selection
* and the file read
*/
SelectionsResult selectionsResult = seSelection.processExplicitSelection(poReader);
if (selectionsResult.hasActiveSelection()) {
MatchingSelection matchingSelection = selectionsResult.getActiveSelection();
CalypsoPo calypsoPo = (CalypsoPo) matchingSelection.getMatchingSe();
logger.info(&amp;quot;The selection of the PO has succeeded.&amp;quot;);
logger.info(
&amp;quot;=================================================================================&amp;quot;);
logger.info(
&amp;quot;= 2nd PO exchange =&amp;quot;);
logger.info(
&amp;quot;= Open a secure session =&amp;quot;);
logger.info(
&amp;quot;= Reading of Environment and Holder file (SFI=07h) =&amp;quot;);
logger.info(
&amp;quot;=================================================================================&amp;quot;);
PoTransaction poTransaction = new PoTransaction(new PoResource(poReader, calypsoPo),
samResource, new SecuritySettings());
/*
* Prepare the reading order and keep the associated parser for later use once the
* transaction has been processed.
*/
int readEnvironmentAndHolderParserIndex = poTransaction.prepareReadRecordsCmd(
SFI_EnvironmentAndHolder, // the sfi top select
ReadDataStructure.SINGLE_RECORD_DATA, // read mode enum to indicate a SINGLE, MULTIPLE or COUNTER read
RECORD_NUMBER_1, // the record number to read (or first record to read in case of several records)
String.format( // extra information included in the logs (can be null or empty)
&amp;quot;EventLog (SFI=%02X, recnbr=%d))&amp;quot;,
SFI_EnvironmentAndHolder,
RECORD_NUMBER_1));
/*
* Open Session for the debit key
*/
boolean poProcessStatus = poTransaction.processOpening(
PoTransaction.ModificationMode.ATOMIC,
PoTransaction.SessionAccessLevel.SESSION_LVL_DEBIT, (byte) 0, (byte) 0);
if (!poProcessStatus) {
throw new IllegalStateException(&amp;quot;processingOpening failure.&amp;quot;);
}
if (!poTransaction.wasRatified()) {
logger.info(
&amp;quot;=================== Previous Secure Session was not ratified ====================&amp;quot;);
}
/*
* Retrieve the data read from the parser updated during the transaction process
*/
byte EnvironmentAndHolderLog[] = (((ReadRecordsRespPars) poTransaction
.getResponseParser(readEnvironmentAndHolderParserIndex)).getRecords())
.get((int) RECORD_NUMBER_1);
/* Log the result */
logger.info(&amp;quot;Environment And Holder file data: {}&amp;quot;, ByteArrayUtil.toHex(EnvironmentAndHolderLog));
logger.info(
&amp;quot;=================================================================================&amp;quot;);
logger.info(
&amp;quot;= 3th PO exchange =&amp;quot;);
logger.info(
&amp;quot;= Close the secure session =&amp;quot;);
logger.info(
&amp;quot;=================================================================================&amp;quot;);
/*
* Close the Secure Session.
* A ratification command will be sent (CONTACTLESS_MODE).
*/
poProcessStatus = poTransaction.processClosing(ChannelState.CLOSE_AFTER);
if (!poProcessStatus) {
throw new IllegalStateException(&amp;quot;processClosing failure.&amp;quot;);
}
logger.info(
&amp;quot;=================================================================================&amp;quot;);
logger.info(
&amp;quot;= Successful mutual authentication =&amp;quot;);
logger.info(
&amp;quot;= End of the Calypso PO processing =&amp;quot;);
logger.info(
&amp;quot;=================================================================================&amp;quot;);
} else {
logger.error(&amp;quot;The selection of the PO has failed.&amp;quot;);
}
} else {
logger.error(&amp;quot;No PO were detected.&amp;quot;);
}
System.exit(0);
}
/**
* Sets the reader parameters for contactless secure elements
*
* @param reader the reader to configure
* @throws KeypleBaseException in case of an error while settings the parameters
*/
private static void setContactlessSettings(SeReader reader) throws KeypleBaseException {
/* Enable logging */
reader.setParameter(PcscReader.SETTING_KEY_LOGGING, &amp;quot;true&amp;quot;);
/* Contactless SE works with T1 protocol */
reader.setParameter(PcscReader.SETTING_KEY_PROTOCOL, PcscReader.SETTING_PROTOCOL_T1);
/*
* PC/SC card access mode:
* The PO reader is set to EXCLUSIVE mode to avoid side effects during the selection step
* that may result in session failures.
*/
reader.setParameter(PcscReader.SETTING_KEY_MODE, PcscReader.SETTING_MODE_EXCLUSIVE);
/* Set the PO reader protocol flag */
reader.addSeProtocolSetting(
SeCommonProtocols.PROTOCOL_ISO14443_4,
PcscProtocolSetting.PCSC_PROTOCOL_SETTING.get(SeCommonProtocols.PROTOCOL_ISO14443_4));
}
/**
* Sets the reader parameters for contacts secure elements
*
* @param reader the reader to configure
* @throws KeypleBaseException in case of an error while settings the parameters
*/
private static void setContactsSettings(SeReader reader) throws KeypleBaseException {
/* Enable logging */
reader.setParameter(PcscReader.SETTING_KEY_LOGGING, &amp;quot;true&amp;quot;);
/* Contactless SE works with T0 protocol */
reader.setParameter(PcscReader.SETTING_KEY_PROTOCOL, PcscReader.SETTING_PROTOCOL_T0);
/*
* PC/SC card access mode:
* The SAM is left in the SHARED mode (by default) to avoid automatic resets due to the
* limited time between two consecutive exchanges granted by Windows.
*/
reader.setParameter(PcscReader.SETTING_KEY_MODE, PcscReader.SETTING_MODE_SHARED);
/* Set the SAM reader protocol flag */
reader.addSeProtocolSetting(
SeCommonProtocols.PROTOCOL_ISO7816_3,
PcscProtocolSetting.PCSC_PROTOCOL_SETTING.get(SeCommonProtocols.PROTOCOL_ISO7816_3));
}
/**
* Check SAM presence and consistency and return a SamResource when everything is correct.
*
* Throw an exception if the expected SAM is not available
*
* @param samReader the SAM reader
*/
private static SamResource checkSamAndOpenChannel(SeReader samReader) {
/*
* Check the availability of the SAM doing a ATR based selection,
* open its physical and logical channels,
* keep it open
*/
SeSelection samSelection = new SeSelection();
SamSelector samSelector = new SamSelector(SamRevision.C1, &amp;quot;.*&amp;quot;, &amp;quot;Selection SAM C1&amp;quot;);
/* Prepare selector, ignore AbstractMatchingSe here */
samSelection.prepareSelection(new SamSelectionRequest(samSelector, ChannelState.KEEP_OPEN));
CalypsoSam calypsoSam;
try {
calypsoSam = (CalypsoSam) samSelection.processExplicitSelection(samReader)
.getActiveSelection().getMatchingSe();
if (!calypsoSam.isSelected()) {
throw new IllegalStateException(&amp;quot;Unable to open a logical channel for SAM!&amp;quot;);
}
} catch (KeypleReaderException e) {
throw new IllegalStateException(&amp;quot;SAM Reader exception: &amp;quot; + e.getMessage());
}
return new SamResource(samReader, calypsoSam);
}
}
&lt;/code>&lt;/pre>
&lt;p>Copy the properties file below in a new properties file named simplelogger.properties in resources. The application log output format is configurable in this properties files.&lt;/p>
&lt;pre>&lt;code class="language-properties"># SLF4J's SimpleLogger configuration file
# Simple implementation of Logger that sends all enabled log messages, for all defined loggers, to System.err.
# Default logging detail level for all instances of SimpleLogger.
# Must be one of (&amp;quot;trace&amp;quot;, &amp;quot;debug&amp;quot;, &amp;quot;info&amp;quot;, &amp;quot;warn&amp;quot;, or &amp;quot;error&amp;quot;).
# If not specified, defaults to &amp;quot;info&amp;quot;.
org.slf4j.simpleLogger.defaultLogLevel=trace
# Logging detail level for a SimpleLogger instance named &amp;quot;xxxxx&amp;quot;.
# Must be one of (&amp;quot;trace&amp;quot;, &amp;quot;debug&amp;quot;, &amp;quot;info&amp;quot;, &amp;quot;warn&amp;quot;, or &amp;quot;error&amp;quot;).
# If not specified, the default logging detail level is used.
#org.slf4j.simpleLogger.log.xxxxx=
# Set to true if you want the current date and time to be included in output messages.
# Default is false, and will output the number of milliseconds elapsed since startup.
org.slf4j.simpleLogger.showDateTime=true
# The date and time format to be used in the output messages.
# The pattern describing the date and time format is the same that is used in java.text.SimpleDateFormat.
# If the format is not specified or is invalid, the default format is used.
# The default format is yyyy-MM-dd HH:mm:ss:SSS Z.
org.slf4j.simpleLogger.dateTimeFormat=[HH:mm:ss:SSS]
# Set to true if you want to output the current thread name.
# Defaults to true.
org.slf4j.simpleLogger.showThreadName=true
# Set to true if you want the Logger instance name to be included in output messages.
# Defaults to true.
org.slf4j.simpleLogger.showLogName=false
# Set to true if you want the last component of the name to be included in output messages.
# Defaults to false.
org.slf4j.simpleLogger.showShortLogName=true
org.slf4j.simpleLogger.levelInBrackets=true
&lt;/code>&lt;/pre>
&lt;h2 id="run">Run&lt;/h2>
&lt;p>Connect your PO and SAM readers.&lt;/p>
&lt;p>Put the SAM in the SAM reader.&lt;/p>
&lt;p>Place the PO on the PO reader.&lt;/p>
&lt;p>Configure the PO and SAM readers you use in the java file (you have to respect the case for the reader name) :&lt;/p>
&lt;pre>&lt;code class="language-java"> /* PO Reader name */
private final static String PO_READER_NAME = &amp;quot;XXX&amp;quot;;
/* SAM Reader name */
private final static String SAM_READER_NAME = &amp;quot;XXX&amp;quot;;
&lt;/code>&lt;/pre>
&lt;p>If you donât know the reader name, run the application in debug mode and get the reader name in plugin variable returned by:&lt;/p>
&lt;blockquote>
&lt;p>seProxyService.getPlugin(PLUGIN_NAME) methode: plugin -&amp;gt; readers -&amp;gt; X -&amp;gt; terminal -&amp;gt; name .&lt;/p>
&lt;/blockquote>
&lt;p>Run the application.&lt;/p>
&lt;p>Note: All project dependencies, including Keyple components, are downloaded during the first run, which can take several minutes.&lt;/p></description></item><item><title>Keyple âCoreâ â User guide (high level API)</title><link>/keyple-website/docs/keyplecore-userguide/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0100</pubDate><guid>/keyple-website/docs/keyplecore-userguide/</guid><description>&lt;p>This high-level API is convenient for developers implementing smart card processing application for terminal interfaced with smart card readers.&lt;/p>
&lt;h2 id="packages--features">Packages &amp;amp; features&lt;/h2>
&lt;p>The Keyple Core User API is a tool to manage readers, and to select âgenericâ Secure Elements.&lt;/p>
&lt;table>
&lt;tr>
&lt;td colspan="2">&lt;b>Features&lt;/b>&lt;/td>
&lt;td>&lt;b>Packages&lt;/b>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td rowspan="3">SE reader management&lt;/td>
&lt;td>Secure Element reader access&lt;/td>
&lt;td>org.eclipse.keyple.core.&lt;b>seproxy&lt;b>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Notifications of:
&lt;li>reader plug/unplug,&lt;/li>
&lt;li>SE insertion/remove&lt;/li>
Definition of automatic selection request in case of SE insertion on an Observable Reader.&lt;/td>
&lt;td>org.eclipse.keyple.core.seproxy.&lt;b>event&lt;b>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Communication protocols filters (setting for contactless/contacts SE Reader)&lt;/td>
&lt;td>org.eclipse.keyple.core.seproxy.&lt;b>protocol&lt;b>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SE selection&lt;/td>
&lt;td>Generic selection of a Secure Element&lt;/td>
&lt;td>org.eclipse.keyple.core.&lt;b>selection&lt;b>&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h2 id="secure-element-transaction-sequence--setting--selection">Secure Element transaction sequence â setting &amp;amp; selection&lt;/h2>
&lt;p>A Secure Element transaction starts with the setting of plugins in order to choose the reader to communicate with SE.&lt;/p>
&lt;p>Using a SE reader, depending on its capabilities, there can be two ways to select a SE through it:&lt;/p>
&lt;ul>
&lt;li>Either the processing of an âexplicit selectionâ: if a SE is present in the reader, then the terminal directly operates a SE selection request through the reader.&lt;/li>
&lt;li>Otherwise if the reader is âobservableâ, the operating of a âdefault selectionâ: in this case a default selection request is defined on the reader, the terminal observes the reader, and wait to be notified by the reader about a SE insertion and selection.&lt;/li>
&lt;/ul>
&lt;p>At the end the terminal gets a selected SE, it can follow by operating APDU commands with the selected SE until the communication channel is kept open.&lt;/p>
&lt;p>&lt;img src="../../img/KeypleCore-0-SE_SelectionScenarii.png" alt="SE Selection Scenarii scheme" title="SE Selection Scenarii">&lt;/p>
&lt;p>Then a Keyple Core extension could be used to operates APDU commands with the selected SE solution.&lt;/p>
&lt;blockquote>
&lt;p>The Keyple Calypso extension provides a high-level API to defined ticketing processing involving Calypso cards, cf.:
&lt;a href="https://github.com/eclipse/keyple-java/blob/master/docs/KeypleCalypso_UserGuide.adoc" target="_blank" rel="noopener">âKeyple Calypso User Guideâ&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="secure-element-proxy-service-api--readers-management">Secure Element Proxy Service API â readers management&lt;/h2>
&lt;p>Using the Keyple Core, Secure Element Readers (SeReader) are managed through plugins (ReaderPlugin).&lt;/p>
&lt;p>The active plugins are registered to the SE Proxy Service (the singleton SeProxyService).&lt;/p>
&lt;ul>
&lt;li>Each plugin is registered through a unique name to the SE Proxy Service.&lt;/li>
&lt;li>Each reader of a plugin is also defined with a unique name inside the plugin.&lt;/li>
&lt;/ul>
&lt;h3 id="plugin-setting">Plugin setting&lt;/h3>
&lt;p>To secure the usage of the SE Proxy API for the development of terminal applications, the internal implementation of plugins (classes SpecificPluginImpl &amp;amp; SpecificReaderImpl) is hidden.&lt;/p>
&lt;ul>
&lt;li>For a specific plugin, only the plugin &amp;amp; reader interfaces (SpecificPlugin &amp;amp; SpecificReader) and the factory (class SpecificPluginFactory) are public.&lt;/li>
&lt;li>The factory of a plugin is set to register a specific plugin to the SE Proxy Service.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../img/KeypleCore-1-SE_Proxy-PluginSetting.png" alt="SE Proxy - Plugin Setting scheme" title="SE Proxy - Plugin Setting">&lt;/p>
&lt;p>Most of plugins of local readers of Keyple are defined as singleton with a unique instance (e.g.: PC/SC, Android NFC, Android OMAPI, most of embedded readers).&lt;/p>
&lt;p>For the Remote SE plugin defined to manage remote readers, specific plugin instances are created for each communication interfaces.&lt;/p>
&lt;h3 id="se-readers-access">SE readersâ access&lt;/h3>
&lt;p>The SE Proxy Service allows to get all the list of the active plugins. A specific plugin could also be directly recovered through its name.&lt;/p>
&lt;p>In the same way, a plugin can provide the list of all the plugged readers.&lt;/p>
&lt;p>&lt;img src="../../img/KeypleCore-2-SE_Proxy-ReaderAccess.png" alt="SE Proxy - Reader Access scheme" title="SE Proxy - Reader Access">&lt;/p>
&lt;p>Depending on the native reader technology, some specific parameters could be defined at the plugin or reader level.&lt;/p>
&lt;p>For a classic plugin, the number of readers is determinate, all the plugged readers of the plugin are directly available for the SE Proxy Service.&lt;/p>
&lt;h4 id="support-of-reader-farm-or-hsm">Support of reader farm or HSM&lt;/h4>
&lt;p>For systems based on a centralized security, in order to manage multiple remote terminal in parallel, central servers could requires to interface a huge number (several hundreds or thousands) of SE through a farm of readers or HSM (Hardware Security Module: an electronic board able to emulate multiple SE).&lt;/p>
&lt;ul>
&lt;li>The multitude of embedded SE could be divided in different groups of profiles.&lt;/li>
&lt;li>An HSM is often shared between several services, so the full set of readers isn&amp;rsquo;t directly available for a service, a service has to request the allocation of a reader from a specific group.&lt;/li>
&lt;/ul>
&lt;p>The SE Proxy Service could support reader farm or HSM though plugins managing &amp;ldquo;pool&amp;rdquo; of readers (ReaderPoolPlugin).&lt;/p>
&lt;ul>
&lt;li>At the initialization, the list of reader is empty. The list is be filled depending on the reader allocations requested.&lt;/li>
&lt;li>When not more required, a reader could be released from the pool.&lt;/li>
&lt;/ul>
&lt;p>All plugins have to implement the interface ReaderPlugin and SeReader. A plugin managing a pool of reader should implement in addition the interface ReaderPoolPlugin.&lt;/p>
&lt;h4 id="se-presence-check--explicit-selection-transaction">SE presence check &amp;amp; âexplicit selection transactionâ&lt;/h4>
&lt;p>A SE reader has the capability to check is a SE is present or not.&lt;/p>
&lt;blockquote>
&lt;p>For SE terminal processing for which the presence of a SE in a reader is &amp;ldquo;static&amp;rsquo; during a transaction, the transaction starts in general with the verification of the SE presence. If the SE is present, the transaction can continue with the selection of the SE. We call this kind of transaction: an &amp;ldquo;explicit selection transaction&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;h3 id="plugin--reader-events">Plugin &amp;amp; Reader events&lt;/h3>
&lt;p>For some SE terminal, the processing is dynamically driven by the insertion/remove of a SE in a reader, or by the plug/unplug of a reader.&lt;/p>
&lt;p>E.g., in transportation, the ticketing transaction of access control gates is often started when a contactless card is detected in the field of the reader. For that, in Keyple, a SE reader or a plugin has to be observable.&lt;/p>
&lt;p>&lt;img src="../../img/KeypleCore-3-SE_Proxy-ObserverPattern.png" alt="SE Proxy - Observer Pattern scheme" title="SE Proxy - Observer Pattern">&lt;/p>
&lt;p>A plugin could be optionally observable (by implementing ObservablePlugin).&lt;/p>
&lt;ul>
&lt;li>In this case a terminal application could observe the plugin (by implementing PluginObserver) in order to be notified (PluginEvent) when a new reader is plugged to the plugin, or when a referenced reader is unplugged.&lt;/li>
&lt;li>To receive the notification of a specific plugin, the plugin observer should first be added to the observer list of the observable plugin.&lt;/li>
&lt;/ul>
&lt;p>Depending on the capability of the plugin, a reader could be optionally observable (by implementing ObservableReader).&lt;/p>
&lt;ul>
&lt;li>A terminal application could observe the plugin (by implementing ReaderObserver) in order to be notified (ReaderEvent) when a SE is inserted or removed from a specific.&lt;/li>
&lt;li>The reader observer should be added to the observer list to receive the notifications the observable reader.&lt;/li>
&lt;/ul>
&lt;p>By default, an observable reader notifies only the insertion or the remove of a SE.&lt;/p>
&lt;h4 id="plugin-observability-activation">Plugin observability activation&lt;/h4>
&lt;p>An observable plugin automatically starts to observe plugin events when at least one plugin observer is registered and stops the listening when the last plugin observer is removed.&lt;/p>
&lt;h4 id="automatic-selection--default-selection-transaction">Automatic selection &amp;amp; âdefault selection transactionâ&lt;/h4>
&lt;p>On an observable reader, there is in addition the possibility to define a &amp;ldquo;default selection operation&amp;rdquo;: in this case, when a SE is inserted, the observable reader tries automatically to select the inserted SE using the defined default setting.&lt;/p>
&lt;ul>
&lt;li>If the inserted SE is successfully selected, then the observable reader notifies that &amp;ldquo;an inserted SE has matched the default selection&amp;rdquo; and provides the corresponding response.&lt;/li>
&lt;li>Otherwise if the observable reader failed to select the inserted SE, it could just notify that a SE has been inserted.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>For SE terminal for which the processing is &amp;ldquo;dynamically&amp;rdquo; driven by the presence of a SE in a reader, the transaction starts in general with the detection of the insertion of a SE and its automatic selection. The reader observer is then notified to analyze the response of the selected SE, and to continue the transaction with the SE. We call this kind of transaction: a &amp;ldquo;default selection transaction&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="../../img/KeypleCore-4-SE_Proxy-SE_Listening.png" alt="SE Proxy - SE Listening scheme" title="SE Proxy - SE Listening">&lt;/p>
&lt;h4 id="reader-notification-modes">Reader notification modes&lt;/h4>
&lt;p>If no default selection is defined, an observable reader notifies its observers for âSE insertionâ (whatever the SE detected) or âSE removedâ events.
A default selection could be defined for the âalwaysâ or the &amp;ldquo;matched onlyâ notification mode.&lt;/p>
&lt;ul>
&lt;li>In the always mode, if the inserted matches the default selection, the observers are notified about a âSE matchedâ event, otherwise an âSE insertionâ event is notified.&lt;/li>
&lt;li>In case of &amp;ldquo;matched onlyâ mode, the observable reader doesnât notify SE insertion event. The reader observer will be notified only if a default selection succeed on the observable reader; this configuration allows the reader observer to skip the processing of wrong SE insertions.&lt;/li>
&lt;/ul>
&lt;h4 id="reader-observability-activation-polling-mode--se-removal-procedure">Reader observability activation, âpolling modeâ &amp;amp; âSE removal procedureâ&lt;/h4>
&lt;p>For an observable reader, the listening of reader event requires also the registration of at least one reader observer.&lt;/p>
&lt;p>An observable reader could switch between four internal states: âWait for start detectionâ, âWait for SE insertionâ, âWait for SE processingâ, âWait for SE removalâ.&lt;/p>
&lt;ul>
&lt;li>At the wait for start detection, the observable reader doesnât notify any event.&lt;/li>
&lt;li>The start of the SE detection by an observable reader need to be explicitly requested by an observer by setting a âpolling modeâ either through a âstartSeDetectionâ or a âsetDefaultSelectionRequestâ commands. The SE detection could be started for polling mode defined either in âsingle shotâ or ârepeatingâ mode.
&lt;ul>
&lt;li>In single shot mode, the observable reader stops the detection after the SE removal (back to the wait for start detection).&lt;/li>
&lt;li>In repeating mode, after the SE removal, the observable reader restart to detect another SE (back to the wait for SE insertion).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wait for SE insertion, if a SE is inserted or selected, the registered reader observers are notified by the observable reader according to the defined notification mode. The observable reader switches to the wait for SE processing.&lt;/li>
&lt;li>During the SE processing by the observers, the observable reader waits that an observer acknowledges the end of the SE processing.&lt;/li>
&lt;li>There are two waits to ends the processing of an observed SE:
&lt;ul>
&lt;li>Either an observer directly could stop the listening of the observable reader (âstopSeDetectionâ command). The observable reader switches to the wait for start detection, and the observers are immediately notified about the SE remove.&lt;/li>
&lt;li>Otherwise, the observers could wait for a clean remove of the SE from the observable reader; itâs the SE removal sequence:
&lt;ul>
&lt;li>When the main reader observer has finished the processing of the SE, it could request the observable reader to wait for the remove of the SE (ânotifySeProcessedâ command).&lt;/li>
&lt;li>Finally, the reader observers could be notified when the SE is effectively removed.&lt;/li>
&lt;li>If the SE insertion listening started in the &amp;ldquo;repeating polling mode&amp;rdquo;, then when the SE is removed, the observable reader automatically starts again the listening of a new SE insertion; otherwise a new explicit request to start the SE listening is required to restart the listening.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="secure-element-selection-api">Secure Element Selection API&lt;/h2>
&lt;h3 id="selection-parameters-communication-protocol-atr-aid">Selection parameters (Communication protocol, ATR, AID)&lt;/h3>
&lt;p>To select a Secure Element, a SE Selector has to be defined, based on one to three parameters.&lt;/p>
&lt;ul>
&lt;li>A SE selection could be defined for a specific communication protocol.&lt;/li>
&lt;li>A SE could be filtered for an ATR (Answer To Reset) matching a specific regular expression.&lt;/li>
&lt;li>A specific application of a SE could be selected by setting its AID (Application IDentifier).&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../img/KeypleCore-5-SE_Proxy-SE_Selector.png" alt="SE Proxy - SE Selector scheme" title="SE Proxy - SE Selector">&lt;/p>
&lt;h3 id="selection-transaction">Selection transaction&lt;/h3>
&lt;p>To operate a transaction with a SE, it should be firstly selected. The aim of the SE selection API is to get a SE resource: a set of a reader with a selected SE.&lt;/p>
&lt;p>A SE Selection is managed in two steps:&lt;/p>
&lt;ul>
&lt;li>first the âpreparationsâ of selection request based on SE selector,&lt;/li>
&lt;li>next the âprocessingâ of the selection requests.&lt;/li>
&lt;/ul>
&lt;p>In order to manage multiple kinds of SE, several selection requests could be prepared with different selectors.&lt;/p>
&lt;p>Depending on the setting of the reader, the processing of the selection could be operated in two different ways:&lt;/p>
&lt;ul>
&lt;li>either in a âexplicitâ way after the checking of the SE presence,&lt;/li>
&lt;li>or in a âdefaultâ way for an observable reader detecting the insertion of a SE.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>cf.
&lt;a href="https://github.com/eclipse/keyple-java/blob/develop/java/example/generic/pc/UseCase1_ExplicitSelectionAid/src/main/java/org/eclipse/keyple/example/generic/pc/usecase1/ExplicitSelectionAid_Pcsc.java" target="_blank" rel="noopener">âGeneric Use Case 1 / Explicit AID Selectionâ&lt;/a> example&lt;br>
cf.
&lt;a href="https://github.com/eclipse/keyple-java/blob/develop/java/example/generic/pc/UseCase2_DefaultSelectionNotification/src/main/java/org/eclipse/keyple/example/generic/pc/usecase2/DefaultSelectionNotification_Pcsc.java" target="_blank" rel="noopener">âGeneric Use Case 2 / Default Selection Notificationâ&lt;/a> example&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="../../img/KeypleCore-6-SE_Proxy-SE_Selection.png" alt="SE Proxy - SE Selection scheme" title="SE Proxy - SE Selection">&lt;/p>
&lt;p>In case a SE Selection is prepared with a channel control mode defined as âkeep openâ, then the different prepared selectors are operated with the presented SE, but the processing of the selection stops when a selector matches the SE.&lt;/p>
&lt;ul>
&lt;li>The result of the SE selection could be a single âmatching SEâ: this SE is kept as selected in the reader. Itâs possible to directly operate command with the SE.&lt;/li>
&lt;/ul>
&lt;p>But if a SE selection has been defined with a channel control mode at âclose afterâ, in this case all the prepared SE selectors are operated whatever the matching result.&lt;/p>
&lt;ul>
&lt;li>After each selector processing, if a selector has matched, the logical channel with the SE is closed (the SE is no more selected).&lt;/li>
&lt;li>If several applications of the presented SE have matched the selectors: the result of the processing of SE selections is a list matching SE, but all of them are deselected. To continue the SE processing, the terminal application has to choose one matching SE, and to select it again but in âkeep openâ channel control mode.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>cf.
&lt;a href="https://github.com/eclipse/keyple-java/blob/develop/java/example/generic/pc/UseCase3_GroupedMultiSelection/src/main/java/org/eclipse/keyple/example/generic/pc/usecase3/GroupedMultiSelection_Pcsc.java" target="_blank" rel="noopener">âGeneric Use Case 3 / Grouped Multi-Selectionâ&lt;/a> example&lt;/p>
&lt;/blockquote>
&lt;p>After the selection of a SE, using a SE resource, the terminal can continue by operating a specific transaction with the corresponding SE.&lt;/p>
&lt;blockquote>
&lt;p>cf.
&lt;a href="https://github.com/eclipse/keyple-java/blob/develop/java/example/generic/pc/UseCase4_SequentialMultiSelection/src/main/java/org/eclipse/keyple/example/generic/pc/usecase4/SequentialMultiSelection_Pcsc.java" target="_blank" rel="noopener">âGeneric Use Case 4 / Sequential Multi-Selectionâ&lt;/a> example&lt;/p>
&lt;/blockquote></description></item><item><title>Keyple Calypso â User guide (high level API)</title><link>/keyple-website/docs/keyplecalypso-userguide/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0100</pubDate><guid>/keyple-website/docs/keyplecalypso-userguide/</guid><description>&lt;h2 id="packages--features">Packages &amp;amp; features&lt;/h2>
&lt;p>The &lt;strong>Keyple Calypso User API is an extension of the Keyple Core User API&lt;/strong> to manage Calypso Portable Object securely using Calypso SAM:&lt;/p>
&lt;ul>
&lt;li>The generic Secure Element selection is enhanced for the &lt;strong>selection of a Calypso PO&lt;/strong>. The FCI response is automatically analyzed in order to identify the revision and the features supported by the Calypso PO. The invalidation status is also checked.&lt;/li>
&lt;li>The selected Calypso PO object allows to automatically initialize a &lt;strong>Calypso PO transaction&lt;/strong>: high level functional commands could be prepared and processed in order to &lt;strong>read or write data in the PO file structure&lt;/strong>, outside or securely inside a &lt;strong>Calypso secure session&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;table>
&lt;tr>
&lt;td colspan="2">&lt;b>Features&lt;/b>&lt;/td>
&lt;td>&lt;b>Packages&lt;/b>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td rowspan="2" width="15%">Calypso PO operations&lt;/td>
&lt;td width="50%">Selection of Calypso SE: PO or SAM
PO transaction:
&lt;li>Read / update of data&lt;/li>
&lt;li>PO authentication&lt;/li>&lt;/td>
&lt;td width="35%">org.eclipse.keyple.calypso.&lt;b>transaction&lt;b>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Calypso PO responses data parsing&lt;/td>
&lt;td>org.eclipse.keyple.calypso.&lt;b>command.po.parser&lt;b>&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h2 id="calypso-selection">Calypso Selection&lt;/h2>
&lt;p>The Calypso API to select a Portable object is an extension of the generic Secure Element selection Core API:&lt;/p>
&lt;ul>
&lt;li>A PO AID selection could be defined to &lt;strong>accept or reject invalidated PO&lt;/strong>.&lt;/li>
&lt;li>A request for a SE selection is defined with SE selector containing at least an AID (to operate through a Select Application APDU command) or an ATR filter. A request for a PO selection could be enhanced to operate after the PO selector processing some APDU commands with the PO : &lt;strong>Select File or Read Records commands&lt;/strong>.&lt;/li>
&lt;li>In case of successful Calypso PO, the matching SE is retuned as a Calypso PO. The Calypso API analyzes the startup information of a Calypso PO in order to identify the kind of product, its revision, the optional features supported, the file structure used. Then for coming PO commands, the setting of the technical parameters automatically managed.&lt;/li>
&lt;/ul>
&lt;p>The PO command grouped with the PO selection have to be âpreparedâ before the processing of a default or explicit SE selection.&lt;/p>
&lt;blockquote>
&lt;p>cf.
&lt;a href="https://github.com/eclipse/keyple-java/blob/develop/java/example/calypso/pc/UseCase1_ExplicitSelectionAid/src/main/java/org/eclipse/keyple/example/calypso/pc/usecase1/ExplicitSelectionAid_Pcsc.java" target="_blank" rel="noopener">âCalypso Use Case 1 / Explicit AID Selectionâ&lt;/a> example&lt;br>
cf.
&lt;a href="https://github.com/eclipse/keyple-java/blob/develop/java/example/calypso/pc/UseCase2_DefaultSelectionNotification/src/main/java/org/eclipse/keyple/example/calypso/pc/usecase2/DefaultSelectionNotification_Pcsc.java" target="_blank" rel="noopener">âCalypso Use Case 2 / Default Selection Notificationâ&lt;/a> example&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="../../img/KeypleCalypso-1-Transaction-PO_Selection.png" alt="Calypso - PO Selection scheme" title="Calypso - PO Selection">
A âPO resourceâ is the set of a Calypso PO and the reader on which it is selected.&lt;/p>
&lt;p>In a same way the Calypso APO provides the tool to select a Calypso security module (a SAM). A SAM selector doesnât support AID. The corresponding matching SE is a Calypso SAM. A Calypso SAM and the reader used for its selection defines a âSAM resourceâ.&lt;/p>
&lt;h2 id="calypso-secure-transaction">Calypso secure transaction&lt;/h2>
&lt;p>A PO transaction could be operated on a Calypso resource. In case a SAM resource is set, a PO transaction could support the Calypso secure session in order to manage a mutual authentication between the terminal and the Calypso PO.&lt;/p>
&lt;p>Through the PO transaction API, only the APDU commands for the PO are explicitly defined; the APDU commands for the SAM are automatically built by the library. Two kinds of methods are provided by the API: â&lt;strong>prepare&lt;/strong>â methods, and â&lt;strong>process&lt;/strong>â methods.&lt;/p>
&lt;ul>
&lt;li>The âprepareâ methods allows to define PO file selection and PO data access operations (read or update of records for a specific file, append of record for a cyclic file, increase or decrease of the value of a counter).&lt;/li>
&lt;li>A âprocessâ method sends to the PO at least the previously prepared command.
&lt;ul>
&lt;li>The process PO commands method could operated only if no secure session is currently open with the PO. If one or several PO commands have been prepared, a single request is done to the PO reader.&lt;/li>
&lt;li>The process opening method allows to manage the opening of a secure session.
&lt;ul>
&lt;li>First a single request is operated to the SAM reader in order to set the PO serial as the cryptographic diversifier, and to get the terminal challenge for the session.&lt;/li>
&lt;li>Then another single request is done to the PO reader to play the prepared PO command, and to manage the opening of the PO session.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A process PO command in session method could be processed only if a secure session is already open with PO.
&lt;ul>
&lt;li>A single request Is operated with the PO reader to operate the prepared PO commands.&lt;/li>
&lt;li>Another single request is sent to the SAM reader to update the update the digest of the MAC session.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The process closing method is used to manage the closing of the secure session with the PO.
&lt;ul>
&lt;li>A first SAM request is operated to update the digest of the last prepared PO commands and to get the terminal session certificate (to save a PO request, the API anticipates the responses of the prepared PO commands).&lt;/li>
&lt;li>A single PO request is transmitted to run the last prepared PO command, to recover the PO session certificate, and to send the ratification signal if necessary.&lt;/li>
&lt;li>Finally, a second SAM request allows to authenticate the PO. If the transaction is successful the mutual authentication is valid, and the PO has atomically committed the requested data updates.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The minimal costs of a Calypso secure session are:&lt;/p>
&lt;ul>
&lt;li>3 PO requests (1 for the PO selection + 1 for the PO session opening + 1 for the PO session closing).&lt;/li>
&lt;li>And 3 SAM requests if the SAM is already selected (1 for the PO session opening + 2 for the PO session closing); otherwise 4 SAM requests if the SAM isnât already selected.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../img/KeypleCalypso-2-Transaction-PO_Session.png" alt="Calypso - PO Transaction scheme" title="Calypso - PO Transaction">&lt;/p>
&lt;p>By default, the PO transaction manages the Calypso secure session as âatomicâ: the cumulative amount of PO updates command canât exceed the size of the PO session buffer.&lt;/p>
&lt;blockquote>
&lt;p>cf.
&lt;a href="https://github.com/eclipse/keyple-java/blob/develop/java/example/calypso/pc/UseCase4_PoAuthentication/src/main/java/org/eclipse/keyple/example/calypso/pc/usecase4/PoAuthentication_Pcsc.java" target="_blank" rel="noopener">âCalypso Use Case 4 / PO Authenticationâ&lt;/a> example&lt;/p>
&lt;/blockquote>
&lt;p>The PO transaction could also be defined to allow multiple sessions: in this case the transaction is automatically split in several session as necessary.&lt;/p>
&lt;blockquote>
&lt;p>cf.
&lt;a href="https://github.com/eclipse/keyple-java/blob/develop/java/example/calypso/pc/UseCase5_MultipleSession/src/main/java/org/eclipse/keyple/example/calypso/pc/usecase5/MultipleSession_Pcsc.java" target="_blank" rel="noopener">âCalypso Use Case 5 / PO Multiple Session&amp;rdquo;&lt;/a> example&lt;/p>
&lt;/blockquote></description></item><item><title>First Meet Up Eclipse Keyple</title><link>/keyple-website/post/firstmeetupeclipsekeyple/</link><pubDate>Wed, 01 Jul 2020 15:19:23 +0200</pubDate><guid>/keyple-website/post/firstmeetupeclipsekeyple/</guid><description>&lt;p>On October 17, 2019, we organized the first Meet Up Eclipse Keyple! Great moments of exchanges around the first Open Source SDK for Ticketing with BenoÃ®t Boute, Nicolas Generali, Pierre Terree, Hicham ELBIZY, Benoist Laforge, GaÃ«l Blondelle, Camille Moulin, Philippe Vappereau, Valentina Zajackowski. Many thanks to them for their interventions and also to Manon Chaix, Jean-Pierre Fortune, Olivier Delcroix, Ludovic TEIXEIRA COSTA and all the participants!&lt;/p>
&lt;p>See the whole event on video:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/4j5rkvdXU7g" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>Discover the photos: &lt;a href="https://drive.google.com/drive/folders/1StRgiAxKrn0mHsP9WwIQ_bopQW-eGVb8">https://drive.google.com/drive/folders/1StRgiAxKrn0mHsP9WwIQ_bopQW-eGVb8&lt;/a>&lt;/p>
&lt;p>And the presentations: &lt;a href="https://drive.google.com/file/d/1GAAhW-mv-E6kxqVySv8-KSjMJ15tZBkM/view">https://drive.google.com/file/d/1GAAhW-mv-E6kxqVySv8-KSjMJ15tZBkM/view&lt;/a>&lt;/p></description></item><item><title>RATP Smart Systems - Remote SE use case</title><link>/keyple-website/post/rss-remote-se/</link><pubDate>Tue, 01 Jan 2019 14:13:44 +0200</pubDate><guid>/keyple-website/post/rss-remote-se/</guid><description>&lt;p>RATP Smart Systems has integrated in 2019 Keyple into the new retail shops reloading system of RATP in Paris Great Region. 1800 Android terminals from Coppernic to retaillers has been deployed.&lt;/p></description></item><item><title/><link>/keyple-website/what-is-keyple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/keyple-website/what-is-keyple/</guid><description/></item></channel></rss>